<?xml version="1.0"?>
<!DOCTYPE sdmetricsmetamodel SYSTEM 'metamodel.dtd'>

<!-- metamodel_describe6.xml

SDMetrics V2.0 Meta model for Describe 6
Copyright (c) 2002-2012 Juergen Wuest

The MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this SDMetrics project file (the "Project File"), to deal in the Project File 
without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Project File, and to permit persons to whom the Project File is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Project File.

THE PROJECT FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE PROJECT FILE.

Note: this license grant only applies to this Project File, and not to any
other part of SDMetrics.

-->

<sdmetricsmetamodel version="2.0">



<modelelement name="sdmetricsbase">
	<attribute name="context" type="ref">Owner of the element in the UML model.</attribute>
	<attribute name="id" type="data">Unique identifier of the model element.</attribute>
	<attribute name="name" type="data">Name of the element in UML model.</attribute>
	<attribute name="stereotypes" type="ref" multiplicity="many">The stereotypes of the model element.</attribute>
</modelelement>


<!-- classes, interfaces, attributes, operations -->
<modelelement name="class">
	<attribute name="visibility" type="data">Visibility of the class (public, private, protected, package).</attribute>
	<attribute name="abstract" type="data">Boolean indicating if class is abstract.</attribute>
	<attribute name="leaf" type="data">Boolean indicating if a class must not have subclasses.</attribute>
</modelelement>
<modelelement name="interface" />
<modelelement name="datatype" />
<modelelement name="attribute">
	<attribute name="visibility" type="data">Visibility of the attribute (public, private, protected, package).</attribute>
	<attribute name="attributetype" type="ref">Reference to the attribute type (class, data type etc).</attribute>
	<attribute name="changeability" type="data">Changeability of the attribute (changeable or none, frozen, addOnly).</attribute>
</modelelement>

<modelelement name="operation">
	<attribute name="visibility" type="data">Visibility of the operation (public, private, protected, package).</attribute>
	<attribute name="abstract" type="data">Boolean indicating if operation is abstract.</attribute>
	<attribute name="isquery" type="data">Boolean indicating if operation is a query that does not change the classifier's state.</attribute>
</modelelement>
<modelelement name="parameter">
	<attribute name="kind" type="data">The kind of parameter (in, out, inout, return).</attribute>
	<attribute name="parametertype" type="ref">Reference to the parameter type (class, data type etc).</attribute>
</modelelement>
<modelelement name="method"/>

<!-- models, packages, subsystems -->
<modelelement name="model" />
<modelelement name="package" />
<modelelement name="subsystem" />

<!-- relationships: association, generalization, ... -->
<modelelement name="association">

  <attribute name="composition">Indicates if the association is a composition (true), aggregation (empty string), or plain (none).</attribute>
  <attribute name="aggregateend" type="ref">The aggregation end that represents the "whole".</attribute>

</modelelement>
<modelelement name="associationclass"/>
<modelelement name="associationend">
	<attribute name="navigable" type="data">Boolean indicating if the association end is navigable.</attribute>

<!-- attribute "aggregation": defined as a metric for Describe. -->

	<attribute name="associationendtype" type="ref">A link to the element attached to the association end.</attribute>
</modelelement>
<modelelement name="generalization">
	<attribute name="genchild" type="ref">Link to the child in the generalization.</attribute>
	<attribute name="genparent" type="ref">Link to the parent in the generalization.</attribute>
</modelelement>
<modelelement name="abstraction">
	<attribute name="abssupplier" type="ref">Link to the interface.</attribute>
	<attribute name="absclient" type="ref">Link to the element implementing the interface</attribute>
</modelelement>
<modelelement name="dependency">
	<attribute name="depsupplier" type="ref">Link to the supplier of the dependency.</attribute>
	<attribute name="depclient" type="ref">Link to the client of the dependency.</attribute>
</modelelement>
<modelelement name="usage">
	<attribute name="depsupplier" type="ref">Link to the supplier of the usage.</attribute>
	<attribute name="depclient" type="ref">Link to the client of the usage.</attribute>
</modelelement>



<!-- instance specifications, connectors. -->
 
<modelelement name="collaboration" />

<modelelement name="interaction" />

<modelelement name="lifeline">
	<attribute name="represents" type="ref">The interaction participant that this lifeline represents.</attribute>
</modelelement>

<modelelement name="part">
	<attribute name="type" type="ref">Reference to the type of the part.</attribute>
</modelelement>

<modelelement name="connector">
  <attribute name="fromline" type="ref" />
	<attribute name="toline" type="ref" />
</modelelement>
<modelelement name="connectorend">
  <attribute name="role" type="ref">The element that is attached at this connector end.</attribute>
</modelelement>

<modelelement name="message">
	<attribute name="sendevent" type="ref">Occurrence spec of the message sending.</attribute>
	<attribute name="receiveevent" type="ref">Occurrence spec of the message receiption.</attribute>
  <attribute name="sort">The sort of communication (synchCall, asynchCall, asynchSignal).</attribute>
</modelelement>

<modelelement name="occurrencespec">
  <attribute name="covered" type="ref">The lifeline on which this occurrence specification appears.</attribute>
	<attribute name="event" type="ref">The occurring event.</attribute>
</modelelement>

<modelelement name="combinedfragment">
  <attribute name="operator">The operator of the combined fragment.</attribute>
</modelelement>


<!-- state machines -->
<modelelement name="statemachine" />
<modelelement name="region" />
<modelelement name="state">
	<attribute name="kind">The kind of state: '' (empty), final, initial, deepHistory, shallowHistory, join, fork, choice, junction, entryPoint, exitPoint, terminate.</attribute>
	<attribute name="iscomposite">Boolean indicating if this is a composite state.</attribute>
  <attribute name="entryaction" type="ref" multiplicity="many">The entry activities of the state.</attribute>
  <attribute name="exitaction" type="ref" multiplicity="many">The entry activities of the state.</attribute>
  <attribute name="doactivity" type="ref" multiplicity="many">The entry activities of the state.</attribute>
  <attribute name="internaltrans" type="ref" multiplicity="many">The internal transitions of the state.</attribute>
</modelelement>
<modelelement name="transition">
	<attribute name="transsource" type="ref">The source state of the transition.</attribute>
	<attribute name="transtarget" type="ref">The target state of the transition.</attribute>
	<attribute name="preconditions" type="ref" multiplicity="many">The preconditions of the transition.</attribute>
	<attribute name="postconditions" type="ref" multiplicity="many">The postconditions of the transition.</attribute>
</modelelement>
<modelelement name="constraint"/>
<modelelement name="event">
	<attribute name="kind" type="data">The kind of event.</attribute>
</modelelement>
<modelelement name="action">
	<attribute name="kind" type="data">The kind of action.</attribute>
</modelelement>
<modelelement name="procedure" />


<!-- activities -->

<modelelement name="activity" />
<modelelement name="activitygroup">
  <attribute name="kind">The kind of activity group: partition, structured, interruptible, iteration (default)</attribute>
  <attribute name="contents" type="ref" multiplicity="many">The contents of the group or partition.</attribute>
</modelelement>
 
<modelelement name="controlnode">
  <attribute name="kind">The kind of control node: initial, join, decision, activityfinal, flowfinal.</attribute>
</modelelement>

<modelelement name="objectnode">
  <attribute name="kind">The kind of object node: datastore or parameterusage or signal.</attribute>
</modelelement>
	
<modelelement name="invocation" />	

<modelelement name="multiflow">
  <attribute name="source" type="ref">Source of the control flow.</attribute>
	<attribute name="target" type="ref">Target of the control flow.</attribute>
</modelelement>

<modelelement name="signal"/>



<!-- use case model -->
<modelelement name="usecase"/>
<modelelement name="actor"/>
<modelelement name="usecaseextend">
	<attribute name="usecaseextbase" type="ref">The use case that is extended.</attribute>
	<attribute name="usecaseextension" type="ref">The use case that is the extension.</attribute>
	<attribute name="usecaseextensionpoint" type="ref">The extension point in the extended use case.</attribute>
</modelelement>
<modelelement name="usecaseinclude">
	<attribute name="usecaseincbase" type="ref">The including use case.</attribute>
	<attribute name="usecaseaddition" type="ref">The included use case.</attribute>
</modelelement>
<modelelement name="extensionpoint">
</modelelement>


<!-- components, nodes -->
<modelelement name="component">
	<attribute name="deploymentlocation" type="ref">The node on which the component is deployed.</attribute>
</modelelement>
<modelelement name="componentinstance">
	<attribute name="componenttype" type="ref">The component that is instantiated.</attribute>
</modelelement>
<modelelement name="node"/>
<modelelement name="nodeinstance">
	<attribute name="nodetype" type="ref">The node that is instantiated.</attribute>
</modelelement>


<modelelement name="port">
  <attribute name="requiredIF" type="ref" multiplicity="many">The required interfaces of the port.</attribute>
  <attribute name="providedIF" type="ref" multiplicity="many">The provided interfaces of the port.</attribute>
</modelelement>	
<modelelement name="artifact" />



<!-- Extension mechanisms: stereotypes, tagged values -->
<modelelement name="stereotype">
  <attribute name="extendedelements" type="ref" multiplicity="many" />
</modelelement>
	
<modelelement name="taggedvalue">
  <attribute name="tagname">The tag of the tagged value.</attribute>
  <attribute name="tagvalue">The value of the tagged value.</attribute>
</modelelement>




</sdmetricsmetamodel>

